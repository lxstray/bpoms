version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: monkey-messenger-db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./docker/postgres:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: monkey-messenger-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - ./docker/pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app-network

  api1:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: monkey-messenger-api1
    environment:
      DB_HOST: postgres
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_NAME: ${DB_NAME}
      DB_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
      REFRESH_SECRET: ${REFRESH_SECRET}
      PORT: 5000
      SERVER_ID: "API Server 1"
    ports:
      - "5000:5000"
    volumes:
      - ./:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  api2:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: monkey-messenger-api2
    environment:
      DB_HOST: postgres
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_NAME: ${DB_NAME}
      DB_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
      REFRESH_SECRET: ${REFRESH_SECRET}
      PORT: 5001
      SERVER_ID: "API Server 2"
    ports:
      - "5001:5001"
    volumes:
      - ./:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  haproxy:
    image: haproxy:2.7
    container_name: monkey-messenger-haproxy
    ports:
      - "6000:6000"
    volumes:
      - ./haproxy:/usr/local/etc/haproxy
    depends_on:
      - api1
      - api2
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    name: monkey-messenger-postgres-data 